# Implementation of lab3


class Entry:
    """
    A class representing an entry i.e. a post.
    Each entry is identified by its sequence number and its creator_ip
    """

    def __init__(self, creator_ip, sequence_number, entry_text, message_sequence_number):
        """
        Create a new entry
        :param creator_ip: the ip address of the creator of the entry
        :param sequence_number: the sequence number of the entry
        :param entry_text: the text associated with this entry
        :param message_sequence_number : the sequence number of the message that created this entry
        """
        self.entry_text = entry_text
        self.sequence_number = sequence_number
        self.creator_ip = creator_ip

        # the message that created the entry
        self.message = Message(message_sequence_number, creator_ip)

    def __str__(self):
        return "Entry '%s' created by %s with sequence number %d" % (self.entry_text, self.creator_ip,
                                                                     self.sequence_number)

    def id(self):
        return str(self.sequence_number) + "_" + self.creator_ip


class Message:
    """
    A message received from the board
    """

    def __init__(self, sequence_number, creator_ip):
        self.creator_ip = creator_ip
        self.sequence_number = sequence_number


def _entry_key(entry):
    """
    Utility function used as a key to sort the entries by their sequence_number and then by their creator_ip to break
    the ties.
    :param entry:
    :return:
    """
    creator_ip = int(entry.creator_ip.replace(".", ""))
    return entry.sequence_number, creator_ip


def sort_entries(entries):
    """
    Utility function to sort the entries by the _entry_key function
    :param entries: list of entries
    :return:
    """
    entries.sort(key=_entry_key)

    return entries


class EventualUpdate:
    """
    The class is used to store an eventual update that needs to be applied in the future.
    """

    def __init__(self, update_type, message_sequence_number, message_creator_ip, entry_sequence_number,
                 entry_creator_ip, entry_text=None, send_to_neighbor=False):
        """

        :param update_type: type of update : modify/delete
        :param send_to_neighbor: boolean to indicate if we have to send this update to the neighbors
        :param entry_sequence_number: the sequence number of the entry on which apply the update
        :param entry_creator_ip: the ip address of the entry on which apply the update
        :param entry_text: the message or text associated with the entry
        """
        self.send_to_neighbor = send_to_neighbor
        self.message = Message(message_sequence_number, message_creator_ip)
        self.update_type = update_type

        self.entry_sequence_number = entry_sequence_number
        self.entry_creator_ip = entry_creator_ip
        self.entry_text = entry_text

    def __str__(self):
        return "'%s' to apply on entry the '%d_%s' (%s) with message number %d_%s" % (
            self.update_type, self.entry_sequence_number, self.entry_creator_ip, self.entry_text,
            self.message.sequence_number, self.message.creator_ip)


def start_board():
    """
    Start listening and handle incoming connections in board() function
    :return:
    """
    my_ip = mycontext['ip']
    my_port = mycontext['port']
    print "Listening on IP http://" + str(my_ip) + ":" + str(my_port)
    try:
        listencommhandle = waitforconn(my_ip, my_port, board_connection_handler)
    except Exception, exc:
        print "Exception in start_board: %s, %s\n" % (type(exc), exc)
        raise


def board_connection_handler(ip_address, port, sockobj, thiscommhandle, listencommhandle):
    """
    Called when an incoming message is received --> Important, starting point
    :param ip_address:
    :param port:
    :param sockobj:
    :param thiscommhandle:
    :param listencommhandle:
    :return:
    """
    try:
        msgheader = sockobj.recv(1024)  # Receive message

        # print 'CHANGE ME!!!\n'

        # print '****Request:\n%s' % msgheader
        # React depending on message type: HTTP GET or POST, or some other type of communication.
        if msgheader.startswith('GET'):
            get_board_handler(msgheader, sockobj, thiscommhandle)
        elif msgheader.startswith('POST'):  # the form has been submitted
            # print '****Request:\n%s\n****' % msgheader
            post_requests_handler(msgheader, sockobj, thiscommhandle)
        else:  # if we are here, we received a message from another vessel
            # print '****Request:\n%s\n****' % msgheader
            got_msg_from_neighbor(msgheader, sockobj, thiscommhandle, ip_address)

    except Exception, e:
        print "Exception in board: %s, %s\n" % (type(e), e)
        # raise


def get_board_handler(msgheader, sockobj, thiscommhandle):
    """
    Handles initial GET request from browser, outputs HTML string and closes socket.
    :param msgheader:
    :param sockobj:
    :param thiscommhandle:
    :return:
    """
    htmlresponse = generate_html_page()
    res = make_http_response(200, 'OK', htmlresponse)
    sockobj.send(res)
    stopcomm(thiscommhandle)


def add_entry(entry_text, entry_sequence_number, entry_creator_ip, message_sequence_number):
    """
    Add a new entry.
    :param message_sequence_number:
    :param entry_sequence_number:
    :param entry_creator_ip: the ip address of the creator of this entry
    :param entry_text: entry to add
    :return:
    """
    new_entry = Entry(creator_ip=entry_creator_ip, sequence_number=entry_sequence_number, entry_text=entry_text,
                      message_sequence_number=message_sequence_number)
    mycontext['entries'].append(new_entry)

    # sorting
    mycontext['entries'] = sort_entries(mycontext['entries'])

    return new_entry


def delete_entry(entry_sequence_number, entry_creator_ip):
    """
    Delete an entry
    :param entry_creator_ip:
    :param entry_sequence_number:
    :return:
    """
    counter = 0
    for entry in mycontext['entries']:
        if entry.sequence_number == entry_sequence_number and entry.creator_ip == entry_creator_ip:
            del mycontext['entries'][counter]
            # print "Deleted the entry %d_%s" % (entry_sequence_number, entry_creator_ip)
            return True
        counter += 1

    # print "Tried to delete an entry which is not present anymore"
    return False


def modify_entry(entry_sequence_number, entry_creator_ip, entry_text, message_sequence_number, message_creator_ip):
    """
    Modify an entry. The modification is done only the message sequence number is > to the sequence number of the
    last message that modified the entry
    :param message_creator_ip:
    :param message_sequence_number:
    :param entry_text:
    :param entry_sequence_number: the sequence number of the entry we want to modify
    :param entry_creator_ip: the substitute entry
    :return:
    """
    counter = 0
    for entry in mycontext['entries']:
        if entry.sequence_number == entry_sequence_number and entry.creator_ip == entry_creator_ip:

            # we modify the entry only if the last sequence number of the message that modified the entry is > of the
            # current message number. This is to avoid applying old modifications
            if message_sequence_number > entry.message.sequence_number:
                entry.entry_text = entry_text
                entry.message.sequence_number = message_sequence_number
                entry.message.creator_ip = message_creator_ip
                # we update the list of entries
                mycontext['entries'][counter] = entry

            return True
        counter += 1

    # print "Tried to modify an entry which is not present anymore"

    return False


def update_sequence_number(sequence_number_key, new_sequence_number):
    """
    Updates the sequence number corresponding to the key
    :param sequence_number_key:
    :param new_sequence_number:
    :return:
    """
    # we update the sequence number only if the new one is > to the old one as we keep increasing the sequence numbers.

    if mycontext[sequence_number_key] < new_sequence_number:
        mycontext[sequence_number_key] = new_sequence_number


def get_next_sequence_number(sequence_number_key):
    """
    Returns the next sequence number corresponding to the key
    :param sequence_number_key:
    :return:
    """
    mycontext[sequence_number_key] += 1
    return mycontext[sequence_number_key]


def apply_pending_deletes(entry_sequence_number, entry_creator_ip):
    """
    Apply the pending deletes in the history
    :param entry_creator_ip
    :param entry_sequence_number
    :return:
    """
    counter = 0
    for eventual_update in mycontext['history']:
        if eventual_update.update_type == "delete":
            if eventual_update.entry_creator_ip == entry_creator_ip and eventual_update.entry_sequence_number == entry_sequence_number:
                # we delete the entry and the eventual update
                delete_entry(entry_sequence_number, entry_creator_ip)
                del mycontext['history'][counter]
                # print "Deleted one eventual update %s" % str(eventual_update)

                if eventual_update.send_to_neighbor:
                    # print "Sending the eventual update to be applied to the neighbors"
                    send_msg_to_neighbors("delete", entry_text=None, entry_creator_ip=entry_creator_ip,
                                          entry_sequence_number=entry_sequence_number,
                                          message_sequence_number=eventual_update.message.sequence_number)

                return
        counter += 1


def apply_pending_modifications(entry_sequence_number, entry_creator_ip):
    """
    Apply the pending modifications
    :param entry_sequence_number:
    :param entry_creator_ip:
    :return:
    """
    counter = 0
    for eventual_update in mycontext['history']:
        if eventual_update.update_type == "modify":
            if eventual_update.entry_creator_ip == entry_creator_ip and eventual_update.entry_sequence_number == entry_sequence_number:
                # we modify the entry and delete the eventual update
                modify_entry(entry_sequence_number=entry_sequence_number, entry_creator_ip=entry_creator_ip,
                             entry_text=eventual_update.entry_text,
                             message_sequence_number=eventual_update.message.sequence_number,
                             message_creator_ip=eventual_update.message.creator_ip)
                del mycontext['history'][counter]
                # print "Deleted one eventual update %s" % str(eventual_update)

                if eventual_update.send_to_neighbor:
                    #   print "Sending the eventual update to be applied to the neighbors"
                    send_msg_to_neighbors("modify", entry_text=eventual_update.entry_text,
                                          entry_sequence_number=entry_sequence_number,
                                          entry_creator_ip=entry_creator_ip,
                                          message_sequence_number=eventual_update.message.sequence_number)

                return
        counter += 1


def send_msg_to_neighbors(msg_type, entry_text, entry_creator_ip, entry_sequence_number, message_sequence_number):
    """
    Sends a message to the neighbors telling them to add/delete/modify an entry.
    Here we define our API for the communication between the vessels. The messages sent have the following schema:

    msg_type
    message_sequence_number
    entry_sequence_number
    entry_creator_ip
    [entry_text]

    The first line is the message type that can be either "add", "delete" or "modify" to specify what to do with an
     entry. Depending on the first line (msg_type), the fifth line can be empty (when deleting).

    :param message_sequence_number:
    :param entry_creator_ip:
    :param entry_text:
    :param msg_type
    :param entry_sequence_number
    :return:
    """

    my_port = mycontext['port']
    my_ip = mycontext['ip']

    if msg_type == "add":
        msg_to_send = "add\n%s\n%s\n%s\n%s" % (
            message_sequence_number, entry_sequence_number, entry_creator_ip, entry_text)
    elif msg_type == "delete":
        msg_to_send = "delete\n%s\n%s\n%s" % (message_sequence_number, entry_sequence_number, entry_creator_ip)
    else:
        msg_to_send = "modify\n%s\n%s\n%s\n%s" % (
            message_sequence_number, entry_sequence_number, entry_creator_ip, entry_text)

    for neighbor in mycontext['neighbors']:
        if neighbor != my_ip:  # I don't send a msg to myself
            try:
                # print "Opening connection to", neighbor, "on port"
                sockojb = openconn(neighbor, my_port)
                # print "Successful connection to", neighbor
                sockojb.send(msg_to_send)
                sockojb.close()
            except Exception, exception:
                print "Could not send message to", neighbor, "Error :", str(exception)


def got_msg_from_neighbor(msgheader, sockobj, thiscommhandle, neighbor_ip):
    """
    This function is called when we receive a message that is not a GET or POST request i.e from another vessel.
    It handles the message according to our API definition.
    :param neighbor_ip:
    :param sockobj:
    :param thiscommhandle:
    :param msgheader: message header
    :return:
    """

    # Start the timer for the measurements
    start_timer()

    splitted_msg = msgheader.split("\n")
    # print "************ \n", msgheader, "\n************"

    msg_type = splitted_msg[0]
    message_sequence_number = int(splitted_msg[1])
    entry_sequence_number = int(splitted_msg[2])

    # simulate network latency
    # if mycontext['ip'] == "198.133.224.147" and msg_type == "add":
    #    sleep(20)

    mycontext['entry_lock'].acquire()

    # we update the message sequence number of this vessel
    update_sequence_number('last_message_sequence_number', message_sequence_number)

    if msg_type == "add":

        entry_creator_ip = neighbor_ip
        entry_text = splitted_msg[4]

        # we update the entry sequence number by the one received
        update_sequence_number('last_entry_sequence_number', entry_sequence_number)

        add_entry(entry_sequence_number=entry_sequence_number, entry_text=entry_text,
                  entry_creator_ip=entry_creator_ip, message_sequence_number=message_sequence_number)

        apply_pending_modifications(entry_sequence_number, entry_creator_ip)
        apply_pending_deletes(entry_sequence_number, entry_creator_ip)

    elif msg_type == "delete":
        entry_creator_ip = splitted_msg[3]
        ok = delete_entry(entry_sequence_number, entry_creator_ip)

        if ok:  # we have successfully deleted the entry
            sockobj.send(make_http_response(204, 'OK', ""))
        else:  # the entry is not in the list, we return a 404 and store an eventual update

            eventual_update = EventualUpdate(update_type="delete", entry_sequence_number=entry_sequence_number,
                                             entry_creator_ip=entry_creator_ip,
                                             message_sequence_number=message_sequence_number,
                                             message_creator_ip=neighbor_ip)
            # print "Storing an eventual update :", eventual_update

            mycontext['history'].append(eventual_update)

            sockobj.send(
                make_http_response(404, "Not found", "The entry with %s was not found." % entry_sequence_number))

    elif msg_type == "modify":
        entry_creator_ip = splitted_msg[3]
        entry_text = splitted_msg[4]
        ok = modify_entry(entry_sequence_number=entry_sequence_number, entry_creator_ip=entry_creator_ip,
                          entry_text=entry_text, message_sequence_number=message_sequence_number,
                          message_creator_ip=neighbor_ip)

        if ok:  # we have successfully modified the entry
            sockobj.send(make_http_response(204, 'OK', ""))
        else:  # the entry is not in the list, we return a 404 and store an eventual update

            eventual_update = EventualUpdate(update_type="modify", entry_sequence_number=entry_sequence_number,
                                             entry_creator_ip=entry_creator_ip, entry_text=entry_text,
                                             message_sequence_number=message_sequence_number,
                                             message_creator_ip=neighbor_ip)

            # print "Storing an eventual update :", eventual_update
            mycontext['history'].append(eventual_update)

            sockobj.send(
                make_http_response(404, "Not found", "The entry with %s was not found." % entry_sequence_number))

    mycontext['entry_lock'].release()

    stopcomm(thiscommhandle)

    mycontext['timer_lock'].acquire()
    mycontext['nb_messages_received'] += 1
    finish_timer()
    mycontext['timer_lock'].release()


def post_requests_handler(msgheader, sockobj, thiscommhandle):
    """
    Handles the POST requests.
    :param msgheader: the request header
    :param sockobj: the socket object
    :param thiscommhandle: the command handle created by the current connection
    :return:
    """

    # Start the time for the measurements
    start_timer()

    # extract the query from the HTTP request
    query = extract_http_request_contents(msgheader)
    # print "query", query
    # extract the query parameters
    parameters = extract_parameters_from_query(query)
    # print "parameters", parameters

    # we split the url to get the URI
    splitted_header = msgheader.split()

    # for example : /entries or /entries/id
    uri = splitted_header[1]

    # each request received from the board corresponds to a new message, so we get a new message sequence number
    mycontext['message_lock'].acquire()

    message_sequence_number = get_next_sequence_number('last_message_sequence_number')

    mycontext['message_lock'].release()

    if uri == "/entries":
        # here we add a new entry and return the id of the newly created entry

        mycontext['entry_lock'].acquire()
        # print "Add a new entry with value : ", parameters['entry']

        new_sequence_number = get_next_sequence_number('last_entry_sequence_number')

        new_entry = add_entry(entry_text=parameters['entry'], entry_sequence_number=new_sequence_number,
                              entry_creator_ip=mycontext['ip'], message_sequence_number=message_sequence_number)

        sockobj.send(make_http_response(201, 'OK', str(new_entry.id()) + "\n"))

        stopcomm(thiscommhandle)

        apply_pending_modifications(new_sequence_number, mycontext['ip'])
        apply_pending_deletes(new_sequence_number, mycontext['ip'])

        mycontext['entry_lock'].release()

        send_msg_to_neighbors("add", entry_text=parameters['entry'], entry_creator_ip=mycontext['ip'],
                              entry_sequence_number=new_sequence_number,
                              message_sequence_number=message_sequence_number)

    else:
        entry_sequence_number = int(uri.split('/')[2])
        entry_creator_ip = parameters['creator_ip']

        if parameters['delete'] == '1':
            # We delete the entry

            mycontext['entry_lock'].acquire()

            ok = delete_entry(entry_sequence_number, entry_creator_ip)

            if ok:  # we have successfully deleted the entry
                sockobj.send(make_http_response(204, 'OK', ""))
            else:  # the entry is not in the list, we return a 404 and store an eventual update
                eventual_update = EventualUpdate(update_type="delete", entry_sequence_number=entry_sequence_number,
                                                 entry_creator_ip=entry_creator_ip,
                                                 message_sequence_number=message_sequence_number,
                                                 message_creator_ip=mycontext['ip'], send_to_neighbor=True)
                # print "Storing an eventual update :", eventual_update

                mycontext['history'].append(eventual_update)

                sockobj.send(
                    make_http_response(404, "Not found", "The entry with %s was not found." % entry_sequence_number))

            stopcomm(thiscommhandle)

            mycontext['entry_lock'].release()

            if ok:  # We send a message to the neighbors only if the deletion was successful
                send_msg_to_neighbors("delete", entry_text=None, entry_creator_ip=entry_creator_ip,
                                      entry_sequence_number=entry_sequence_number,
                                      message_sequence_number=message_sequence_number)
        else:

            mycontext['entry_lock'].acquire()

            # we modify the entry by replacing its value with new entry
            # print 'Modification of the entry %d_%s. The new value is : ' % (entry_sequence_number,
            #                                                                entry_creator_ip), parameters['entry']

            ok = modify_entry(entry_sequence_number=entry_sequence_number, entry_text=parameters['entry'],
                              entry_creator_ip=entry_creator_ip, message_sequence_number=message_sequence_number,
                              message_creator_ip=mycontext['ip'])

            if ok:  # we have successfully modified the entry
                sockobj.send(make_http_response(204, 'OK', ""))
            else:  # the entry is not in the list, we return a 404 and store an eventual update
                eventual_update = EventualUpdate(update_type="modify", entry_sequence_number=entry_sequence_number,
                                                 entry_creator_ip=entry_creator_ip, entry_text=parameters['entry'],
                                                 message_sequence_number=message_sequence_number,
                                                 message_creator_ip=mycontext['ip'], send_to_neighbor=True)

                # print "Storing an eventual update :", eventual_update

                mycontext['history'].append(eventual_update)

                sockobj.send(
                    make_http_response(404, "Not found", "The entry with %s was not found." % entry_sequence_number))

            stopcomm(thiscommhandle)

            mycontext['entry_lock'].release()

            if ok:  # We send a message to the neighbors only if the modification was successful
                send_msg_to_neighbors("modify", entry_text=parameters['entry'],
                                      entry_sequence_number=entry_sequence_number, entry_creator_ip=entry_creator_ip,
                                      message_sequence_number=message_sequence_number)
    mycontext['timer_lock'].acquire()
    mycontext['nb_messages_received'] += 1
    finish_timer()
    mycontext['timer_lock'].release()


def make_http_response(status, status_text, htmlresponse):
    """
    Wrap into HTTP headers
    :param status:
    :param status_text:
    :param htmlresponse:
    :return:
    """
    response_template = "HTTP/1.1 %d %s\r\nContent-type: text/html\r\nContent-length: %i\r\n\r\n%s"
    return response_template % (status, status_text, len(htmlresponse), htmlresponse)


def extract_http_request_contents(header):
    """
    Utility function to extract the contents (payload) from HTTP request
    :param header:
    :return:
    """

    # find content length
    content_length = header.split('Content-Length: ')

    if len(content_length) == 1:
        # we cannot find the string 'Content-Length: '
        # we try with the lower case version. Header fields should be case-insensitive according to rfc 2616 section 4.2
        # Postman for instance sends it in lower case
        content_length = header.split('content-length: ')

    content_length = content_length[1]
    content_length = int(content_length.split('\r\n')[0])

    # extract the http response body and discard the header
    contents = header[-content_length:]
    return contents


def extract_parameters_from_query(msg):
    """
    Utility function to extract query parameter from HTML query. Extracts the query parameters as a dictionary: {name:value}
    :param msg: input to extract as dictionary. Format : comment=aa&ip=127.0.0.1&port=63101&action=Delete
    :return:
    """

    parameters = {}
    arr = msg.split('&')
    for a in arr:
        pp = a.split('=')
        if len(pp) > 1:
            parameters[pp[0]] = pp[1]
    return parameters


def get_entries_in_html():
    """
    Utility function to get all the entries in a html format
    :return: a string representing all the entries
    """
    output = ""

    for entry_object in mycontext['entries']:
        output += mycontext['entry_template'] % (
            'entries/%d' % entry_object.sequence_number, entry_object.id(), entry_object.creator_ip,
            entry_object.entry_text)

    return output


def generate_html_page():
    """
    Outputs the blackboard html
    :return:
    """

    entries = get_entries_in_html()

    # dynamic title showing Ip address, port and up time.
    title = 'Sample board @ %s:%d. Up time: %d' % (str(mycontext['ip']), mycontext['port'], int(getruntime()))
    content = mycontext['boardcontents_template'] % (title, entries)
    fullpage_h = mycontext['frontpage_header_template'] + content
    fullpage = fullpage_h + mycontext['frontpage_footer_template'] % mycontext['authors']
    # print entries, content, fullpage
    return fullpage


def start_timer():
    """
    Starts the timer for the measurements. The timer starts when we received the first message
    :return:
    """
    if not mycontext['timer_started']:
        mycontext['timer_started'] = True
        mycontext['start_time'] = getruntime()


def finish_timer():
    nb_message_to_receive = mycontext['nb_messages_to_receive']

    if not mycontext['timer_done']:
        if len(mycontext['entries']) == nb_message_to_receive:
            end_time = getruntime()

            elapsed_time = end_time - mycontext['start_time']
            mycontext['timer_done'] = True
            print "This vessel (%s) took %.2f seconds to reach consistency with %d messages" % (
                                                                    mycontext['ip'], elapsed_time, nb_message_to_receive)
            print "Length of history % d" % len(mycontext['history'])

            # reset the timer
            mycontext['start_time'] = getruntime()
            mycontext['timer_started'] = False
        else:
            # print "Timer not done : %d, %d " % (mycontext['nb_messages_received'], len(mycontext['entries']))
            pass


# ------------------------------------------------------------------------------
# Main entry point of the program. Initalizes global variables in mycontext
# and calls start_board() which opens a socket for incoming connections.
# ------------------------------------------------------------------------------
if callfunc == 'initialize':
    # whenever this vessel gets a connection on its IP:port it'll call function board_connection_handler
    if len(callargs) == 1 or len(callargs) == 2:
        port = int(callargs[0])
        if len(callargs) == 2:
            ip = str(callargs[1])
        else:
            try:
                ip = getmyip()
            except Exception, e:
                print "Could not get an IP\n"
                print (type(e), e)
                raise

    # Fail if we don't have 1 or 2 arguments
    else:
        raise Exception(
            "Usage: python <path to repy.py> <path to restrictions.default> skeleton2016.repy <port> [ip (optional)]")

    # Initialize Port and IP
    mycontext['port'] = port
    mycontext['ip'] = ip

    # read html template files
    mycontext['entry_template'] = file("entry_template.html").read()
    mycontext['boardcontents_template'] = file("boardcontents_template.html").read()
    mycontext['frontpage_header_template'] = file("board_frontpage_header_template.html").read()
    mycontext['frontpage_footer_template'] = file("board_frontpage_footer_template.html").read()

    # Initialize the entries list and first sequence_number
    mycontext['entries'] = []
    mycontext['last_entry_sequence_number'] = 0

    # sequence number associated to each message
    mycontext['last_message_sequence_number'] = 0

    # History of updates to apply in case we have received a delete/modify for an entry that doesn't exist.
    # This may happen if the vessel was down when the add message was sent.
    mycontext['history'] = []

    # Initialize the neighbors
    mycontext['neighbors'] = []

    for line in file("neighborlist.txt", "r"):
        mycontext['neighbors'].append(line.strip())

    # lock used when we want to add/delete/modify entries
    mycontext['entry_lock'] = getlock()

    # message number lock
    mycontext['message_lock'] = getlock()

    # timer stuff for the measurements
    mycontext['timer_started'] = False
    mycontext['timer_done'] = False
    mycontext['timer_lock'] = getlock()
    mycontext['nb_messages_received'] = 0
    mycontext['nb_messages_to_receive'] = 12 * len(mycontext['neighbors'])

    print "Nb messages to received : %d " % mycontext['nb_messages_to_receive']

    mycontext['authors'] = '<a href="mailto:mouctar@student.chalmers.se">mouctar@student.chalmers.se</a> and ' \
                           '<a href="mailto:francine@student.chalmers.se">francine@student.chalmers.se</a>'

    # e = Exception("ex");
    # try:
    #   print "%s, %s\n" %(type(e), e)
    # except Exception, ee:
    #   print ee

    start_board()
