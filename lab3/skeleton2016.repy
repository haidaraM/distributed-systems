# Implementation of lab3


class Entry:
    """
    A class representing an entry i.e. a post.
    Each entry is identified by its sequence number and its creator_ip. So two entries with the same sequence_number
    and creator_ip are considered the same even if they don't have the same message.
    """

    def __init__(self, creator_ip, sequence_number, entry_message):
        """
        Create a new entry
        :param creator_ip: the ip address of the creator of the entry (with the dots)
        :param sequence_number: the sequence number of the entry
        :param entry_message: the message or text associated with this entry
        """
        self.entry_message = entry_message
        self.sequence_number = sequence_number
        self.creator_ip = creator_ip

    def __str__(self):
        return "Entry '{0}' created by {1} with sequence number {2}".format(self.entry_message, self.sequence_number,
                                                                            self.sequence_number)

    def id(self):
        return int(str(self.sequence_number) + self.creator_ip.replace(".", ""))


def _entry_key(entry):
    """
    Utility function used as a key to sort the entries by their sequence_number and then by their creator_ip to break the ties.
    The creator_ip is converted to number.
    :param entry:
    :return:
    """
    creator_ip = int(entry.creator_ip.replace(".", ""))
    return entry.sequence_number, creator_ip


def sort_entries(entries):
    """
    Utility function to sort the entries by _entry_key function
    :param entries: list of entries
    :return:
    """
    entries.sort(key=_entry_key)

    return entries


class EventualUpdate:
    """
    The class is used to store an eventual update that needs to be applied in the future. Depending on the context, an update may
     not be applied.
    """

    def __init__(self, update_type, entry_sequence_number, entry_creator_ip, entry_message=None):
        """

        :param update_type: type of update : modify/delete
        :param entry_sequence_number: the sequence number of the entry on which apply the update
        :param entry_creator_ip: the ip address of the entry on which apply the update
        :param entry_message: the message or text associated with the entry
        """
        self.update_type = update_type
        self.entry_sequence_number = entry_sequence_number
        self.entry_creator_ip = entry_creator_ip
        self.entry_message = entry_message

    def __str__(self):
        return "Eventual update {0} to apply on entry {1} created by {2} ({3})".format(self.update_type,
                                                                                       self.entry_sequence_number,
                                                                                       self.entry_creator_ip,
                                                                                       self.entry_message)


def start_board():
    """
    Start listening and handle incoming connections in board() function
    :return:
    """
    my_ip = mycontext['ip']
    my_port = mycontext['port']
    print "Listening on IP " + str(my_ip) + " port " + str(my_port)
    try:
        listencommhandle = waitforconn(my_ip, my_port, board_connection_handler)
    except Exception, exc:
        print "Exception in start_board: %s, %s\n" % (type(exc), exc)
        raise


def board_connection_handler(ip_address, port, sockobj, thiscommhandle, listencommhandle):
    """
    Called when an incoming message is received --> Important starting point
    :param ip_address:
    :param port:
    :param sockobj:
    :param thiscommhandle:
    :param listencommhandle:
    :return:
    """
    try:
        msgheader = sockobj.recv(1024)  # Receive message

        # print 'CHANGE ME!!!\n'

        # print '****Request:\n%s' % msgheader
        # React depending on message type: HTTP GET or POST, or some other type of communication.
        if msgheader.startswith('GET'):
            get_board_handler(msgheader, sockobj, thiscommhandle)
        elif msgheader.startswith('POST'):  # the form has been submitted
            other_requests_handler(msgheader, sockobj, thiscommhandle)
            # print '****Request:\n%s\n****' % msgheader
        else:  # if we are here, we received a message from another vessel
            # print '****Request:\n%s\n****' % msgheader
            got_msg_from_neighbor(msgheader, sockobj, thiscommhandle, ip_address)

    except Exception, e:
        print "Exception in board: %s, %s\n" % (type(e), e)
        # raise


def get_board_handler(msgheader, sockobj, thiscommhandle):
    """
    Handles initial GET request from browser, outputs HTML string and closes socket.
    :param msgheader:
    :param sockobj:
    :param thiscommhandle:
    :return:
    """
    htmlresponse = generate_html_page()
    res = make_http_response(200, 'OK', htmlresponse)
    sockobj.send(res)
    stopcomm(thiscommhandle)


def delete_entry(entry_sequence_number, creator_ip):
    """
    Delete an entry
    :param creator_ip:
    :param entry_sequence_number:
    :return:
    """
    counter = 0
    for entry in mycontext['entries']:
        if entry.sequence_number == entry_sequence_number and entry.creator_ip == creator_ip:
            del mycontext['entries'][counter]
            return True
        counter += 1

    print "Tried to delete an entry which is not present anymore"
    return False


def modify_entry(entry_sequence_number, entry_creator_ip, entry_message):
    """
    Modify an entry
    :param entry_message:
    :param entry_sequence_number: the sequence number of the entry we want to modify
    :param entry_creator_ip: the substitute entry
    :return:
    """
    counter = 0
    for entry in mycontext['entries']:
        if entry.sequence_number == entry_sequence_number and entry.creator_ip == entry_creator_ip:
            entry.entry_message = entry_message
            mycontext['entries'][counter] = entry
            return True
        counter += 1

    print "Tried to modify an entry which is not present anymore"

    return False


def update_last_sequence_number(new_sequence_number):
    """
    Updates the last sequence number
    :param new_sequence_number:
    :return:
    """
    mycontext['last_sequence_number'] = new_sequence_number


def get_next_sequence_number():
    """
    Returns the next sequence number and updates the last one
    :return:
    """
    next_sequence_number = mycontext['last_sequence_number'] + 1
    mycontext['last_sequence_number'] = next_sequence_number

    return next_sequence_number


def add_entry(entry_message, entry_sequence_number, creator_ip=None):
    """
    Add a new entry.
    :param entry_sequence_number:
    :param creator_ip: the ip address of the creator of this entry
    :param entry_message: entry to add
    :return:
    """
    new_entry = Entry(creator_ip=creator_ip, sequence_number=entry_sequence_number, entry_message=entry_message)
    mycontext['entries'].append(new_entry)

    # sorting
    mycontext['entries'] = sort_entries(mycontext['entries'])

    return new_entry


def send_msg_to_neighbors(msg_type, entry_message, entry_creator_ip, entry_sequence_number=-1):
    """
    Sends a message to the neighbors telling them to add/delete/modify an entry.
    Here we define our API for the communication between the vessels. The messages sent have the following form.

    msg_type
    entry_sequence_number
    entry_creator_ip
    entry_message

    The first line is the message type that can be either "add", "delete" or "modify" to specify what to do with an entry.
    Depending on the first line (msg_type), the fourth line can be empty (when deleting).

    :param entry_creator_ip:
    :param entry_message:
    :param msg_type
    :param entry_sequence_number
    :return:
    """

    my_port = mycontext['port']
    my_ip = mycontext['ip']

    if msg_type == "add":
        msg_to_send = "add\n%s\n%s\n%s" % (entry_sequence_number, entry_creator_ip, entry_message)
    elif msg_type == "delete":
        msg_to_send = "delete\n%s\n%s" % (entry_sequence_number, entry_creator_ip)
    else:
        msg_to_send = "modify\n%s\n%s\n%s" % (entry_sequence_number, entry_creator_ip, entry_message)

    for neighbor in mycontext['neighbors']:
        if neighbor != my_ip:  # I don't send a msg to myself
            try:
                print "Opening connection to", neighbor, "on port"
                sockojb = openconn(neighbor, my_port)
                print "Successful connection to", neighbor
                sockojb.send(msg_to_send)
                sockojb.close()
            except Exception, exception:
                print "Could not send message to", neighbor, "Error :", str(exception)


def got_msg_from_neighbor(msgheader, sockobj, thiscommhandle, neighbor_ip):
    """
    This function is called when we receive a message that is not a GET or POST request i.e from another vessel.
    It handles the message according to our API definition.
    :param neighbor_ip:
    :param sockobj:
    :param thiscommhandle:
    :param msgheader: message header
    :return:
    """
    splitted_msg = msgheader.split("\n")
    print(splitted_msg)
    msg_type = splitted_msg[0]

    entry_sequence_number = int(splitted_msg[1])

    mycontext['entry_lock'].acquire()

    if msg_type == "add":

        entry_creator_ip = neighbor_ip  # here we could also get the creator ip from the message
        entry_message = splitted_msg[3]

        # we update the sequence number by the one received
        update_last_sequence_number(entry_sequence_number)

        add_entry(entry_sequence_number=entry_sequence_number, entry_message=entry_message, creator_ip=entry_creator_ip)

    elif msg_type == "delete":
        entry_creator_ip = splitted_msg[2]  # here we have to get it from the message
        res = delete_entry(entry_sequence_number, creator_ip=entry_creator_ip)

        if res:  # we have successfully deleted the entry
            sockobj.send(make_http_response(204, 'OK', ""))
        else:  # the entry is not in the map, we return a 404

            mycontext['history_lock'].acquire()
            eventual_update = EventualUpdate(update_type="delete", entry_sequence_number=entry_sequence_number,
                                             entry_creator_ip=entry_creator_ip)

            print "Storing an eventual update :", eventual_update

            mycontext['history'].append(eventual_update)

            mycontext['history_lock'].release()

            sockobj.send(
                make_http_response(404, "Not found", "The entry with %s was not found." % entry_sequence_number))

    elif msg_type == "modify":
        entry_creator_ip = splitted_msg[2]
        entry_message = splitted_msg[3]
        res = modify_entry(entry_sequence_number=entry_sequence_number, entry_creator_ip=entry_creator_ip,
                           entry_message=entry_message)

        if res:  # we have successfully modified the entry
            sockobj.send(make_http_response(204, 'OK', ""))
        else:  # the entry is not in the map, we return a 404

            mycontext['history_lock'].acquire()
            eventual_update = EventualUpdate(update_type="modify", entry_sequence_number=entry_sequence_number,
                                             entry_creator_ip=entry_creator_ip, entry_message=entry_message)

            print "Storing an eventual update :", eventual_update

            mycontext['history'].append(eventual_update)

            mycontext['history_lock'].release()

            sockobj.send(
                make_http_response(404, "Not found", "The entry with %s was not found." % entry_sequence_number))

    mycontext['entry_lock'].release()

    stopcomm(thiscommhandle)


def other_requests_handler(msgheader, sockobj, thiscommhandle):
    """
    Handles the POST requests.
    :param msgheader: the request header
    :param sockobj: the socket object
    :param thiscommhandle: the command handle created by the current connection
    :return:
    """
    # extract the query from the HTTP request
    query = extract_http_request_contents(msgheader)
    print "query", query
    # extract the query parameters
    parameters = extract_parameters_from_query(query)
    print "parameters", parameters

    # we split the url to get the URI
    splitted_header = msgheader.split()

    # for example : /entries or /entries/id
    uri = splitted_header[1]

    if uri == "/entries":
        # here we add a new entry and return the id of the newly created entry
        print "add. New value : ", parameters['entry']

        # we get a lock here to prevent some problems
        mycontext['entry_lock'].acquire()

        new_sequence_number = get_next_sequence_number()

        add_entry(entry_message=parameters['entry'], entry_sequence_number=new_sequence_number,
                  creator_ip=mycontext['ip'])

        mycontext['entry_lock'].release()

        sockobj.send(make_http_response(200, 'OK', str(new_sequence_number)))
        stopcomm(thiscommhandle)

        send_msg_to_neighbors("add", entry_message=parameters['entry'], entry_creator_ip=mycontext['ip'],
                              entry_sequence_number=new_sequence_number)

    else:
        entry_sequence_number = int(uri.split('/')[2])
        entry_creator_ip = parameters['creator_ip']

        if parameters['delete'] == '1':
            # We delete the entry
            res = delete_entry(entry_sequence_number, entry_creator_ip)

            if res:  # we have successfully deleted the entry
                sockobj.send(make_http_response(204, 'OK', ""))
            else:  # the entry is not in the map, we return a 404
                sockobj.send(
                    make_http_response(404, "Not found", "The entry with %s was not found." % entry_sequence_number))

            stopcomm(thiscommhandle)

            send_msg_to_neighbors("delete", entry_message=None, entry_creator_ip=entry_creator_ip,
                                  entry_sequence_number=entry_sequence_number)
        else:
            # we modify the entry by replacing it with new entry
            print 'modify. New value : ', parameters['entry']

            res = modify_entry(entry_sequence_number=entry_sequence_number, entry_message=parameters['entry'],
                               entry_creator_ip=entry_creator_ip)

            if res:  # we have successfully modified the entry
                sockobj.send(make_http_response(204, 'OK', ""))
            else:  # the entry is not in the map, we return a 404
                sockobj.send(
                    make_http_response(404, "Not found", "The entry with %s was not found." % entry_sequence_number))

            stopcomm(thiscommhandle)

            send_msg_to_neighbors("modify", entry_message=parameters['entry'],
                                  entry_sequence_number=entry_sequence_number, entry_creator_ip=entry_creator_ip)


def make_http_response(status, status_text, htmlresponse):
    """
    Wrap into HTTP headers
    :param status:
    :param status_text:
    :param htmlresponse:
    :return:
    """
    response_template = "HTTP/1.1 %d %s\r\nContent-type: text/html\r\nContent-length: %i\r\n\r\n%s"
    return response_template % (status, status_text, len(htmlresponse), htmlresponse)


def extract_http_request_contents(header):
    """
    Utility function to extract the contents (payload) from HTTP request
    :param header:
    :return:
    """

    # find content length
    content_length = header.split('Content-Length: ')

    if len(content_length) == 1:
        # we cannot find the string 'Content-Length: '
        # we try with the lower case version. Header fields should be case-insensitive according to rfc 2616 section 4.2
        # Postman for instance sends it in lower case
        content_length = header.split('content-length: ')

    content_length = content_length[1]
    content_length = int(content_length.split('\r\n')[0])

    # extract the http response body and discard the header
    contents = header[-content_length:]
    return contents


def extract_parameters_from_query(msg):
    """
    Utility function to extract query parameter from HTML query. Extracts the query parameters as a dictionary: {name:value}
    :param msg: input to extract as dictionary. Format : comment=aa&ip=127.0.0.1&port=63101&action=Delete
    :return:
    """

    parameters = {}
    arr = msg.split('&')
    for a in arr:
        pp = a.split('=')
        if len(pp) > 1:
            parameters[pp[0]] = pp[1]
    return parameters


def get_entries_in_html():
    """
    Utility function to get all the entries in a html format
    :return: a string representing all the entries
    """
    output = ""

    for entry_object in mycontext['entries']:
        output += mycontext['entry_template'] % (
            'entries/%d' % entry_object.sequence_number, entry_object.id(), entry_object.creator_ip,
            entry_object.entry_message)

    return output


def generate_html_page():
    """
    Outputs the blackboard html
    :return:
    """

    entries = get_entries_in_html()

    # dynamic title showing Ip address, port and up time.
    title = 'Sample board @ %s:%d. Up time: %d' % (str(mycontext['ip']), mycontext['port'], int(getruntime()))
    content = mycontext['boardcontents_template'] % (title, entries)
    fullpage_h = mycontext['frontpage_header_template'] + content
    fullpage = fullpage_h + mycontext['frontpage_footer_template'] % mycontext['authors']
    # print entries, content, fullpage
    return fullpage


# ------------------------------------------------------------------------------    
# Main entry point of the program. Initalizes global variables in mycontext
# and calls start_board() which opens a socket for incoming connections.
# ------------------------------------------------------------------------------
if callfunc == 'initialize':
    # whenever this vessel gets a connection on its IP:port it'll call function board_connection_handler
    if len(callargs) == 1 or len(callargs) == 2:
        port = int(callargs[0])
        if len(callargs) == 2:
            ip = str(callargs[1])
        else:
            try:
                ip = getmyip()
            except Exception, e:
                print "Could not get an IP\n"
                print (type(e), e)
                raise

    # Fail if we don't have 1 or 2 arguments
    else:
        raise Exception(
            "Usage: python <path to repy.py> <path to restrictions.default> skeleton2016.repy <port> [ip (optional)]")

    # Initialize Port and IP
    mycontext['port'] = port
    mycontext['ip'] = ip

    # read html template files
    mycontext['entry_template'] = file("entry_template.html").read()
    mycontext['boardcontents_template'] = file("boardcontents_template.html").read()
    mycontext['frontpage_header_template'] = file("board_frontpage_header_template.html").read()
    mycontext['frontpage_footer_template'] = file("board_frontpage_footer_template.html").read()

    # Initialize the entries list and first sequence_number
    mycontext['entries'] = []
    mycontext['last_sequence_number'] = 0

    # History of updates to apply in case we have received a delete/modify for an entry that doesn't exist.
    # This may happen if the vessel was down when the add message was sent.
    mycontext['history'] = []

    # Initialize the neighbors
    mycontext['neighbors'] = []

    for line in file("neighborlist.txt", "r"):
        mycontext['neighbors'].append(line.strip())

    # lock used when we want to add/delete/modify entries
    mycontext['entry_lock'] = getlock()

    # lock used when we modify the history
    mycontext['history_lock'] = getlock()

    mycontext['authors'] = '<a href="mailto:mouctar@student.chalmers.se">mouctar@student.chalmers.se</a> and ' \
                           '<a href="mailto:francine@student.chalmers.se">francine@student.chalmers.se</a>'

    # e = Exception("ex");
    # try:
    #   print "%s, %s\n" %(type(e), e)
    # except Exception, ee:
    #   print ee

    start_board()
