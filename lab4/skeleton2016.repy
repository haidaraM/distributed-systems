# Simple methods that the byzantine node calls to decide what to vote.


def compute_byzantine_vote_round1(no_loyal, no_total, on_tie):
    """
    Compute byzantine votes for round 1, by trying to create a split decision.
    :param no_loyal: number of loyal nodes,
    :param no_total: number of total nodes,
    :param on_tie: Decision on a tie: True or False
    :return: A list with votes to send to the loyal nodes in the form [True,False,True,.....]
    """
    result_vote = []
    for i in range(0, no_loyal):
        if i % 2 == 0:
            result_vote.append(not on_tie)
        else:
            result_vote.append(on_tie)
    return result_vote


def compute_byzantine_vote_round2(no_loyal, no_total, on_tie):
    """
    Compute byzantine votes for round 2, trying to swing the decision on different directions for different nodes.
    :param no_loyal: number of loyal nodes,
    :param no_total: number of total nodes,
    :param on_tie: Decision on a tie: True or False
    :return: A list where every element is a the vector that the byzantine node will send to every one of the loyal ones
    in the form [[True,...],[False,...],...]
    """
    result_vectors = []
    for i in range(0, no_loyal):
        if i % 2 == 0:
            result_vectors.append([on_tie] * no_total)
        else:
            result_vectors.append([not on_tie] * no_total)
    return result_vectors


def start_board():
    """
    Start listening and handle incoming connections in board() function
    :return:
    """
    my_ip = mycontext['ip']
    my_port = mycontext['port']
    print "Listening on IP http://" + str(my_ip) + ":" + str(my_port)
    try:
        listencommhandle = waitforconn(my_ip, my_port, board_connection_handler)
    except Exception, exc:
        print "Exception in start_board: %s, %s\n" % (type(exc), exc)
        raise


def board_connection_handler(ip_address, port, sockobj, thiscommhandle, listencommhandle):
    """
    Called when an incoming message is received --> Important, starting point
    :param ip_address:
    :param port:
    :param sockobj:
    :param thiscommhandle:
    :param listencommhandle:
    :return:
    """
    try:
        msgheader = sockobj.recv(1024)  # Receive message

        # print '****Request:\n%s' % msgheader

        # React depending on message type: HTTP GET or POST, or some other type of communication.
        if msgheader.startswith('GET'):
            get_requests_handler(msgheader, sockobj, thiscommhandle)
        elif msgheader.startswith('POST'):  # the form has been submitted
            # print '****Request:\n%s\n****' % msgheader

            post_requests_handler(msgheader, sockobj, thiscommhandle)
        else:  # if we are here, we received a message from another vessel
            # print '****Request:\n%s\n****' % msgheader
            got_msg_from_neighbor(msgheader, sockobj, thiscommhandle, ip_address)

    except Exception, e:
        print "Exception in board: %s, %s\n" % (type(e), e)
        # raise


#
def post_requests_handler(msgheader, sockobj, thiscommhandle):
    """
    Handles the POST requests.
    :param msgheader: the request header
    :param sockobj: the socket object
    :param thiscommhandle: the command handle created by the current connection
    :return:
    """
    # extract the query from the HTTP request
    query = extract_http_request_contents(msgheader)
    # print "query", query
    # extract the query parameters
    parameters = extract_parameters_from_query(query)
    # print "parameters", parameters

    # we split the url to get the URI
    splitted_header = msgheader.split()

    uri = splitted_header[1]

    print "Post uri : ", uri

    if uri == "/vote/attack":  # I suggest to attack (I'm not a byzantine)
        vote = True
        mycontext['votes_vector_lock'].acquire()
        mycontext['votes_vector'].append((vote, mycontext['ip']))
        mycontext['votes_vector_lock'].release()

        # sending the vote to the other generals
        msg_type = 'vote'
        msg_to_send = msg_type + "\n" + str(vote)

        send_msg_to_neighbors(msg_to_send)

    elif uri == "/vote/retreat":  # I suggest to retreat (I'm not a byzantine)
        vote = False
        mycontext['votes_vector_lock'].acquire()
        mycontext['votes_vector'].append((vote, mycontext['ip']))
        mycontext['votes_vector_lock'].release()

        # sending the vote to the other generals
        msg_type = 'vote'
        msg_to_send = msg_type + "\n" + str(vote)

        send_msg_to_neighbors(msg_to_send)

    elif uri == "/vote/byzantine":  # I'm a byzantine
        mycontext['byzantine'] = True

        if mycontext['nb_loyal'] == len(mycontext['votes_vector']):
            perform_byzantine_round1()
            perform_byzantine_round2()

    res = make_http_response(200, 'OK', "Success")
    sockobj.send(res)

    stopcomm(thiscommhandle)


def i_am_a_byzantine():
    """
    Return True if this general is a byzantine
    :return:
    """
    return mycontext['byzantine']


def got_msg_from_neighbor(msgheader, sockobj, thiscommhandle, ip_address):
    """
    Called when we have received a msg from a neighbor
    :param msgheader:
    :param sockobj:
    :param thiscommhandle:
    :param ip_address:
    :return:
    """
    splitted_msg = msgheader.split("\n")

    msg_type = splitted_msg[0]

    if msg_type == "vote":
        if splitted_msg[1] == "True" or splitted_msg[1] == 'Attack':
            vote = True
        else:
            vote = False
        mycontext['votes_vector_lock'].acquire()
        mycontext['votes_vector'].append((vote, ip_address))
        mycontext['votes_vector_lock'].release()

        # print "Nb votes : ", len(mycontext['votes_vector'])
        nb_votes = len(mycontext['votes_vector'])

        # if I am a byzantine, I check if all the loyal sent their vote and then I send a different vote to each
        if i_am_a_byzantine() and mycontext['nb_loyal'] == nb_votes:
            perform_byzantine_round1()

            # I can perform directly the round2 because I received all the votes
            perform_byzantine_round2()
        else:
            # if I have received all the votes, I send my votes_vector to all the others vessels
            if nb_votes == len(mycontext['neighbors']):
                msg_type = 'vector_votes'
                votes = [tp[0] for tp in mycontext['votes_vector']]
                ips = [tp[1] for tp in mycontext['votes_vector']]

                msg_to_send = msg_type + "\n" + str(votes) + "\n" + str(ips)
                send_msg_to_neighbors(msg_to_send)

                # we add our vector to the list of vectors of votes
                mycontext['generals_votes'].append((mycontext['ip'], mycontext['votes_vector']))

    elif msg_type == 'vector_votes':

        mycontext['votes_vector_lock'].acquire()

        votes_vector = parse_bool_list(splitted_msg[1])
        ip_list = parse_ip_list(splitted_msg[2])

        # ip_list and votes_vector must have the same size
        i = 0
        tmp = []
        for vote in votes_vector:
            tmp.append((vote, ip_list[i]))
            i += 1

        # print tmp, "from", ip_address

        mycontext['generals_votes'].append((ip_address, tmp))

        mycontext['votes_vector_lock'].release()

        if len(mycontext['generals_votes']) == len(mycontext['neighbors']):
            # the voting
            perform_voting()

    #
    res = make_http_response(200, 'OK', "Success")
    sockobj.send(res)
    stopcomm(thiscommhandle)


def perform_byzantine_round1():
    """
    Perform the round 1 of the byzantine job by sending different vote to each general
    :return:
    """
    round1_vector = compute_byzantine_vote_round1(mycontext['nb_loyal'], len(mycontext['neighbors']),
                                                  mycontext['on_tie'])
    # print round1_vector

    # forward the message to the honest nodes
    i = 0

    msg_type = "vote"

    for neighbor_ip_address in mycontext['neighbors']:

        if mycontext['ip'] != neighbor_ip_address:
            msg_to_send = msg_type + "\n" + str(round1_vector[i])
            send_msg_to_neighbor(msg_to_send, neighbor_ip_address, mycontext['port'])
            i += 1


def perform_byzantine_round2():
    """
    Perform the round 2 of the byzantine job by sending different vector to each general
    :return:
    """
    round2_vector = compute_byzantine_vote_round2(mycontext['nb_loyal'], len(mycontext['neighbors']),
                                                  mycontext['on_tie'])

    # print "round 2 vector", round2_vector

    # forward the message to the honest nodes
    i = 0

    msg_type = "vector_votes"

    for neighbor_ip_address in mycontext['neighbors']:

        if mycontext['ip'] != neighbor_ip_address:
            msg_to_send = msg_type + "\n" + str(round2_vector[i]) + "\n" + str(mycontext['neighbors'])
            send_msg_to_neighbor(msg_to_send, neighbor_ip_address, mycontext['port'])
            i += 1


def sort_key(t):
    """

    :param t: (sender_ip, [(vote, ip),...]
    :return:
    """
    return t[0]


def perform_voting():
    """
    Peform the actual voting
    :return:
    """

    # we exclude certain votes now. These votes correspond to the diagonal or own vote for each vector
    # (see lecture fault tolerance page 44)
    mycontext['votes_vector_lock'].acquire()
    # print "Length of vector before the voting:", len(mycontext['generals_votes'])
    # for sender_vector_tuple in mycontext['generals_votes']:
    #     sender_ip = sender_vector_tuple[0]
    #     votes_and_ip_list = sender_vector_tuple[1]
    #
    #     i = 0
    #     for vote, voter_ip in votes_and_ip_list:
    #         if voter_ip == sender_ip:
    #             del votes_and_ip_list[i]
    #             # we break the inner loop because only one vote in the list can have the same ip
    #             break
    #         i += 1

    mycontext['votes_vector_lock'].release()

    # print "Length of vector after the voting:", len(mycontext['generals_votes'])
    mycontext['generals_votes'].sort(key=sort_key)
    print "After voting", mycontext['generals_votes']

    # majority voting
    result_vector = []
    for j in range(len(mycontext['neighbors'])):
        nb_attacks = 0
        nb_retreats = 0

        for k in range(len(mycontext['neighbors'])):
            sender_ip, votes_vector = mycontext['generals_votes'][k]  # => sender_ip, [(vote, ip), (vote, ip), ...]

            vote = votes_vector[j][0]  # we get the vote (first element of the tuple)
            voter_ip = votes_vector[j][1]
            if voter_ip != sender_ip:
                if vote:
                    nb_attacks += 1
                else:
                    nb_retreats += 1

        if nb_retreats == nb_attacks:
            result_vector.append(mycontext['on_tie'])
        elif nb_retreats > nb_attacks:
            result_vector.append(False)
        else:
            result_vector.append(True)

    print "Final result", result_vector
    mycontext['result_vector'] = result_vector


def get_requests_handler(msgheader, sockobj, thiscommhandle):
    """
    Handles initial GET request from browser, outputs HTML string and closes socket.
    :param msgheader:
    :param sockobj:
    :param thiscommhandle:
    :return:
    """

    # we split the url to get the URI
    splitted_header = msgheader.split()

    uri = splitted_header[1]

    htmlresponse = "No response"

    if uri == "/":
        htmlresponse = generate_html_page()
    elif uri == "/vote/result":
        # TODO : return the result
        # msg = "Voting Results ... %s " % mycontext['votes_vector']
        msg = "Result vector %s" % (mycontext['result_vector'])
        htmlresponse = mycontext['vote_result_template'] % msg
    res = make_http_response(200, 'OK', htmlresponse)
    sockobj.send(res)
    stopcomm(thiscommhandle)


def generate_html_page():
    """
    Return the html page to display
    :return:
    """
    return mycontext['vote_frontpage_template']


def make_http_response(status, status_text, htmlresponse):
    """
    Wrap into HTTP headers
    :param status:
    :param status_text:
    :param htmlresponse:
    :return:
    """
    response_template = "HTTP/1.1 %d %s\r\nContent-type: text/html\r\nContent-length: %i\r\n\r\n%s"
    return response_template % (status, status_text, len(htmlresponse), htmlresponse)


def extract_http_request_contents(header):
    """
    Utility function to extract the contents (payload) from HTTP request
    :param header:
    :return:
    """

    # find content length
    content_length = header.split('Content-Length: ')

    if len(content_length) == 1:
        # we cannot find the string 'Content-Length: '
        # we try with the lower case version. Header fields should be case-insensitive according to rfc 2616 section 4.2
        # Postman for instance sends it in lower case
        content_length = header.split('content-length: ')

    content_length = content_length[1]
    content_length = int(content_length.split('\r\n')[0])

    # extract the http response body and discard the header
    contents = header[-content_length:]
    return contents


def extract_parameters_from_query(msg):
    """
    Utility function to extract query parameter from HTML query. Extracts the query parameters as a dictionary: {name:value}
    :param msg: input to extract as dictionary. Format : comment=aa&ip=127.0.0.1&port=63101&action=Delete
    :return:
    """

    parameters = {}
    arr = msg.split('&')
    for a in arr:
        pp = a.split('=')
        if len(pp) > 1:
            parameters[pp[0]] = pp[1]
    return parameters


def parse_ip_list(stringlist):
    """
    Utility function to transform the representation of a list of string (ip address) to a real list of string for example
    "['192.168.1.1', '192.168.1.1']" => ['192.168.1.1', '192.168.1.1']

    :param stringlist:
    :return:
    """
    tmp = stringlist.replace("[", "").replace("]", "").replace("'", "").split(",")
    tmp = [x.strip() for x in tmp]
    result = []

    for current_ip in tmp:
        result.append(current_ip)
    return result


def parse_bool_list(stringlist):
    """
    Utility function to transform the representation of a list of booleans to a real list of booleans for example
    '[True, True, True, True]' => [True, True, True, True]
    :param stringlist:
    :return:
    """
    tmp = stringlist.replace("[", "").replace("]", "").split(",")
    tmp = [x.strip() for x in tmp]
    result = []

    for bool_string in tmp:
        if bool_string == "True":
            result.append(True)
        else:
            result.append(False)

    return result


def send_msg_to_neighbors(msg_to_send):
    """
    Send a msg to the neighbors.
    The messages sent have the following schema:

    msgtype
    [content]
    [content]

    The msgtype can be : 'vote', 'vector_votes' . If 'vote', the second line should be the vote i.e. True for 'Attack'
    or False for 'Retreat'.
    If msgtype is 'vector_votes', the second line should be the votes this vessel received i.e. [True, False, ...]
    and the third line the ip address of the vessel to which the votes correspond i.e. [192.169.1.1, 192.168.1.1, ...]

    :param msg_to_send the message to send
    :return:
    """

    my_port = mycontext['port']
    my_ip = mycontext['ip']
    for neighbor in mycontext['neighbors']:
        if neighbor != my_ip:  # I don't send a msg to myself
            try:
                # print "Opening connection to", neighbor, "on port"
                sockojb = openconn(neighbor, my_port)
                # print "Successful connection to", neighbor
                sockojb.send(msg_to_send)
                sockojb.close()
            except Exception, exception:
                print str(exception)


def send_msg_to_neighbor(msg_to_send, neighbor_ip_address, port_number):
    """
    Sends a message to a specific neighbor. The message has the same format as in :func:send_msg_to_neighbors
    :param port_number:
    :param msg_to_send:
    :param neighbor_ip_address:
    :return:
    """
    try:
        sockojb = openconn(neighbor_ip_address, port_number)
        sockojb.send(msg_to_send)
        sockojb.close()

    except Exception, exception:
        print str(exception)


def initialize_context(my_ip, my_port):
    """
    Initializes the context by putting the necessary variables in the mycontext
    :return:
    """

    # Initialize Port and IP
    mycontext['port'] = my_port
    mycontext['ip'] = my_ip

    # read html template files
    mycontext['vote_frontpage_template'] = file("vote_frontpage_template.html").read()
    mycontext['vote_result_template'] = file("vote_result_template.html").read()

    # list of the neighbors
    mycontext['neighbors'] = []

    # Initialize the neighbors
    for line in file("neighborlist.txt", "r"):
        mycontext['neighbors'].append(line.strip())

    # number of loyal (honest) nodes
    mycontext['nb_loyal'] = 3

    # boolean to indicate if this general (vessel) if byzantine or not
    mycontext['byzantine'] = False

    # the votes of each general
    mycontext['votes_vector'] = []

    # the final result vector corresponding to the majority voting
    mycontext['result_vector'] = []
    mycontext['result'] = None

    # list of vectors of the generals' votes. Each element of the list is as follow :
    # (sender_ip, [(vote, voter_ip), (vote, voter_ip),...])
    mycontext['generals_votes'] = []

    mycontext['votes_vector_lock'] = getlock()

    # on tie rule. True for attack, False for retreat
    mycontext['on_tie'] = True

    mycontext['authors'] = '<a href="mailto:mouctar@student.chalmers.se">mouctar@student.chalmers.se</a> and ' \
                           '<a href="mailto:francine@student.chalmers.se">francine@student.chalmers.se</a>'


# ------------------------------------------------------------------------------
# Main entry point of the program. Initalizes global variables in mycontext
# and calls start_board() which opens a socket for incoming connections.
# ------------------------------------------------------------------------------
if callfunc == 'initialize':
    # whenever this vessel gets a connection on its IP:port it'll call function board_connection_handler
    if len(callargs) == 1 or len(callargs) == 2:
        port = int(callargs[0])
        if len(callargs) == 2:
            ip = str(callargs[1])
        else:
            try:
                ip = getmyip()
            except Exception, e:
                print "Could not get an IP\n"
                print (type(e), e)
                raise

    # Fail if we don't have 1 or 2 arguments
    else:
        raise Exception(
            "Usage: python <path to repy.py> <path to restrictions.default> skeleton2016.repy <port> [ip (optional)]")

    # Context initialization
    initialize_context(ip, port)

    # e = Exception("ex");
    # try:
    #   print "%s, %s\n" %(type(e), e)
    # except Exception, ee:
    #   print ee

    start_board()
