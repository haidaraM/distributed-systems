# ------------------------------------------------------------------------------
# Start listening and handle incoming connections in board() function
# ------------------------------------------------------------------------------
include election.repy


def start_board():
    my_ip = mycontext['ip']
    my_port = mycontext['port']
    print "Listening on IP " + str(my_ip) + " port " + str(my_port) + " with id " + str(mycontext['my_id'])
    try:
        listencommhandle = waitforconn(my_ip, my_port, board_connection_handler)
    except Exception, e:
        print "Exception in start_board: %s, %s\n" % (type(e), e)
        raise
        # pass


# ------------------------------------------------------------------------------
# Called when an incoming message is received. 
# --> Important starting point
# ------------------------------------------------------------------------------    
def board_connection_handler(ip, port, sockobj, thiscommhandle, listencommhandle):
    try:
        msgheader = sockobj.recv(1024)  # Receive message

        # print 'CHANGE ME!!!\n'

        # print '****Request:\n%s' % msgheader
        # React depending on message type: HTTP GET or POST, or some other type of communication.
        if msgheader.startswith('GET'):
            get_board_handler(msgheader, sockobj, thiscommhandle)
        elif msgheader.startswith('POST'):  # the form has been submitted
            post_requests_handler(msgheader, sockobj, thiscommhandle, ip)
            # print '****Request:\n%s\n****' % msgheader
        else:  # if we are here, we received an election message
            #
            # print '****Request:\n%s\n****' % msgheader
            got_msg_from_a_vessel(msgheader)

    except Exception, e:
        print "Exception in board: %s, %s\n" % (type(e), e)
        # raise


# ------------------------------------------------------------------------------
# Handles initial GET request from browser, outputs HTML string and closes socket.
# ------------------------------------------------------------------------------
def get_board_handler(msgheader, sockobj, thiscommhandle):
    htmlresponse = generate_html_page()
    res = make_http_response(200, 'OK', htmlresponse)
    sockobj.send(res)
    stopcomm(thiscommhandle)


def delete_entry(entry_id):
    """
    Delete an entry
    :param entry_id:
    :return:
    """
    try:
        del mycontext['entries'][entry_id]
        return True
    except KeyError:
        # print "Tried to delete en entry that doesn't exist"
        return False


def modify_entry(entry_id, entry):
    """
    Modify an entry
    :param entry_id: the id of the entry we want to modify
    :param entry: the substitute entry
    :return:
    """

    if entry_id in mycontext['entries']:
        mycontext['entries'][entry_id] = entry
    else:
        print "Tried to delete an entry that doesn't exist"

def _entry_key(entry_key):
    """
    Utility function used as a key to sort the entries by their sequence_number and then by their creator_ip to break
    the ties. The creator_ip is converted to number.
    :param entry:
    :return:
    """
    splited_id = entry_key.split('_')
    sequence_number = int(splited_id[0])
    creator_ip = splited_id[1]

    return sequence_number, creator_ip


def add_entry(entry_id, entry):
    """
    Add a new entry.
    :param entry_id id of the new entry to add
    :param entry: entry to add
    :return:
    """
    mycontext['entries'][entry_id] = entry


def send_msg_to_neighbors(msg_to_send):
    """
    Used by the leader to send a message to the neighbors telling them to add/delete/modify an entry.
    :return:
    """

    my_port = mycontext['port']
    my_ip = mycontext['ip']
    for neighbor in mycontext['neighbors']:
        if neighbor != my_ip:  # I don't send a msg to myself
            try:
                # print "Opening connection to", neighbor, "on port"
                sockojb = openconn(neighbor, my_port)
                # print "Successful connection to", neighbor
                sockojb.send(msg_to_send)
                sockojb.close()
            except Exception, exception:
                print str(exception)


def make_http_request(method, uri, parameters):
    """
    Makes a http request with the given method, uri and parameters
    :param method:
    :param uri:
    :param parameters:
    :return:
    """
    # convert parameters to query string
    query_string = ""
    for key in parameters:
        query_string += str(key) + "=" + str(parameters[key]) + "&"

    request_template = "%s %s HTTP/1.1\r\nHost: %s\r\nContent-Length: %d\r\n%s"

    return request_template % (method, uri, mycontext['ip'], len(query_string), query_string)


def got_msg_from_a_vessel(msgheader):
    """
    This function is called when a vessel receives that is not a GET or POST
    :param msgheader: message header
    :return:
    """
    splitted_msg = msgheader.split("\n")

    msg_type = splitted_msg[0]

    # at the beginning everyone can be a leader
    if msg_type == "election":
        process_election_message(splitted_msg[1])


def am_i_the_leader():
    """
    Returns True if i am the leader, False otherwise
    :return:
    """
    return mycontext['my_id'] == mycontext['leader_id']


def send_to_leader(message):
    """
    Send a message to the leader
    """

    port_number = mycontext['port']
    leader_ip = mycontext['leader_ip']

    sockojb = openconn(leader_ip, port_number)

    sockojb.send(message)

    sockojb.close()


def post_requests_handler(msgheader, sockobj, thiscommhandle, ip_source):
    """
    Handles the post requests.
    If the vessel is not the leader, the message is forwarded to the leader.
    :param ip_source:
    :param msgheader: the request header
    :param sockobj: the socket object
    :param thiscommhandle: the command handle created by the current connection
    :return:
    """
    start_timer()

    # extract the query from the HTTP request
    query = extract_http_request_contents(msgheader)
    # print "query", query
    # extract the query parameters
    parameters = extract_parameters_from_query(query)
    # print "parameters", parameters

    # we split the url to get the URI
    splitted_header = msgheader.split()

    # for example : /entries or /entries/id
    uri = splitted_header[1]

    if uri == "/entries":  # adding a new entry

        if am_i_the_leader():

            mycontext['entry_lock'].acquire()
            # generating the next new id
            next_id = mycontext['last_id'] + 1
            mycontext['last_id'] = next_id

            if 'creator_ip' in parameters:
                ip_entry = parameters['creator_ip']
            else:
                ip_entry = mycontext['ip']

            entry_id = str(next_id) + "_" + ip_entry

            add_entry(entry_id, parameters['entry'])

            parameters['entry_id'] = entry_id
            parameters['operation'] = "add"
            parameters['creator_ip'] = ip_entry

            request = make_http_request("POST", "/from_leader", parameters)
            send_msg_to_neighbors(request)

            mycontext['entry_lock'].release()
        else:  # message received from the form => forward to the leader
            parameters['creator_ip'] = mycontext['ip']
            request = make_http_request("POST", uri, parameters)
            send_to_leader(request)

        sockobj.send(make_http_response(200, 'OK', "Success"))
        stopcomm(thiscommhandle)

    elif uri == "/from_leader":  # a non leader has received a message from the leader
        #print "received message from leader"
        operation = parameters["operation"]
        entry_id = parameters['entry_id']

        mycontext['entry_lock'].acquire()

        if operation == "add":
            add_entry(entry_id, parameters['entry'])
        elif operation == "delete":
            delete_entry(entry_id)
        elif operation == "modify":
            modify_entry(entry_id, parameters['entry'])

        mycontext['entry_lock'].release()

    else:  # here we have an uri like /entries/<entry_id> : delete or modify from the board
        entry_sequence_number = uri.split('/')[2]

        if am_i_the_leader():
            entry_id = str(entry_sequence_number) + "_" + parameters['creator_ip']
            if parameters['delete'] == '1':  # deletion
                mycontext['entry_lock'].acquire()

                delete_entry(entry_id)

                parameters['entry_id'] = entry_id
                parameters['operation'] = "delete"

                request = make_http_request("POST", "/from_leader", parameters)
                send_msg_to_neighbors(request)

                mycontext['entry_lock'].release()
            else:  # modification
                mycontext['entry_lock'].acquire()

                modify_entry(entry_id, parameters['entry'])

                parameters['entry_id'] = entry_id
                parameters['operation'] = "modify"

                request = make_http_request("POST", "/from_leader", parameters)
                send_msg_to_neighbors(request)

                mycontext['entry_lock'].release()

        else:
            request = make_http_request("POST", uri, parameters)
            send_to_leader(request)

        sockobj.send(make_http_response(204, 'OK', "Success"))
        stopcomm(thiscommhandle)

    mycontext['timer_lock'].acquire()
    mycontext['nb_messages_received'] += 1
    finish_timer()
    mycontext['timer_lock'].release()


# ------------------------------------------------------------------------------
# Wrap into HTTP headers
# ------------------------------------------------------------------------------
def make_http_response(status, status_text, htmlresponse):
    response_template = "HTTP/1.1 %d %s\r\nContent-type: text/html\r\nContent-length: %i\r\n\r\n%s"
    return response_template % (status, status_text, len(htmlresponse), htmlresponse)


# ------------------------------------------------------------------------------
# Utility function to extract the contents (payload) from HTTP request
# ------------------------------------------------------------------------------
def extract_http_request_contents(header):
    # find content length
    content_length = header.split('Content-Length: ')

    if len(content_length) == 1:
        # we cannot find the string 'Content-Length: '
        # we try with the lower case version. Header fields should be case-insensitive according to rfc 2616 section 4.2
        # Postman for instance sends it in lower case
        content_length = header.split('content-length: ')

    content_length = content_length[1]
    content_length = int(content_length.split('\r\n')[0])

    # extract the http response body and discard the header
    contents = header[-content_length:]
    return contents


# ------------------------------------------------------------------------------
# Utility function to extract query parameter from HTML query
# ------------------------------------------------------------------------------
def extract_parameters_from_query(msg):
    # extract the query parameters as a dictionary: {name:value}
    # example input format: comment=aa&ip=127.0.0.1&port=63101&action=Delete
    parameters = {}
    arr = msg.split('&')
    for a in arr:
        pp = a.split('=')
        if len(pp) > 1:
            parameters[pp[0]] = pp[1]
    return parameters


def get_entries_in_html():
    """
    Utility function to get all the entries in a html format
    :return: a string representing all the entries
    """
    output = ""


    key_list = mycontext['entries'].keys()
    key_list.sort(key=_entry_key)

    for entry_id in key_list:
        entry = mycontext['entries'][entry_id]
        splited_id = entry_id.split("_")
        sequence_number = int(splited_id[0])
        creator_ip = splited_id[1]
        output += mycontext['entry_template'] % ('entries/%d' % sequence_number, entry_id, creator_ip, entry)

    return output


# ------------------------------------------------------------------------------
# Outputs the blackboard html 
# ------------------------------------------------------------------------------   
def generate_html_page():
    # Initialize blackboard content

    entries = get_entries_in_html()

    # dynamic title showing Ip address, port and up time.
    title = 'Sample board @ %s:%d. Up time: %d. <br> Id : %s. ' \
            % (str(mycontext['ip']), mycontext['port'], int(getruntime()), str(mycontext['my_id']))

    # if I am the leader, print a message
    # TODO : maybe use a lock here
    if mycontext['leader_id'] == mycontext['my_id']:
        title += "I'm the leader"

    content = mycontext['boardcontents_template'] % (title, entries)
    fullpage_h = mycontext['frontpage_header_template'] + content
    fullpage = fullpage_h + mycontext['frontpage_footer_template'] % mycontext['authors']
    # print entries, content, fullpage
    return fullpage


def initialize_context(my_ip, my_port):
    """
    Initializes the context by putting the necessary variables in the mycontext
    :return:
    """
    # Initialize Port and IP
    mycontext['port'] = my_port
    mycontext['ip'] = my_ip

    # read html template files
    mycontext['entry_template'] = file("entry_template.html").read()
    mycontext['boardcontents_template'] = file("boardcontents_template.html").read()
    mycontext['frontpage_header_template'] = file("board_frontpage_header_template.html").read()
    mycontext['frontpage_footer_template'] = file("board_frontpage_footer_template.html").read()

    # Initialize the entries dict and first id
    mycontext['entries'] = {}
    mycontext['last_id'] = 0

    # Initialize the neighbors
    mycontext['neighbors'] = []

    for line in file("neighborlist.txt", "r"):
        mycontext['neighbors'].append(line.strip())

    # authors
    mycontext['authors'] = '<a href="mailto:mouctar@student.chalmers.se">mouctar@student.chalmers.se</a> and ' \
                           '<a href="mailto:francine@student.chalmers.se">francine@student.chalmers.se</a>'

    # generate my id
    mycontext['my_id'] = int(randomfloat() * 1000)
    mycontext['leader_id'] = None
    mycontext['leader_ip'] = None

    # max number of retries to connect to a neighbor
    mycontext['max_retry'] = 3

    mycontext['leader_lock'] = getlock()

    mycontext['entry_lock'] = getlock()

    # timer stuff for the measurements
    mycontext['timer_started'] = False
    mycontext['timer_done'] = False
    mycontext['timer_lock'] = getlock()
    mycontext['nb_messages_received'] = 0


def start_timer():
    """
    Starts the timer for the measurements. The timer starts when we received the first message
    :return:
    """
    if not mycontext['timer_started']:
        mycontext['timer_started'] = True
        mycontext['start_time'] = getruntime()


def finish_timer():
    nb_message_to_receive = 24

    if not mycontext['timer_done']:
        if mycontext['nb_messages_received'] >= nb_message_to_receive:
            end_time = getruntime()

            elapsed_time = end_time - mycontext['start_time']
            mycontext['timer_done'] = True
            print "This vessel (%s) took %.2f seconds to reach consistency with %d messages" % (
                mycontext['ip'], elapsed_time, nb_message_to_receive)

            mycontext['start_time'] = getruntime()
            mycontext['timer_started'] = False
        else:
            # print "Timer not done : %d, %d " % (mycontext['nb_messages_received'], len(mycontext['entries']))
            pass


# ------------------------------------------------------------------------------
# Main entry point of the program. Initalizes global variables in mycontext
# and calls start_board() which opens a socket for incoming connections.
# ------------------------------------------------------------------------------
if callfunc == 'initialize':
    # whenever this vessel gets a connection on its IP:port it'll call function board_connection_handler
    if len(callargs) == 1 or len(callargs) == 2:
        port = int(callargs[0])
        if len(callargs) == 2:
            ip = str(callargs[1])
        else:
            try:
                ip = getmyip()
            except Exception, e:
                print "Could not get an IP\n"
                print (type(e), e)
                raise

    # Fail if we don't have 1 or 2 arguments
    else:
        raise Exception(
            "Usage: python <path to repy.py> <path to restrictions.default> skeleton2016.repy <port> [ip (optional)]")

    # context initialization
    initialize_context(ip, port)

    # e = Exception("ex");
    # try:
    #   print "%s, %s\n" %(type(e), e)
    # except Exception, ee:
    #   print ee

    start_board()

    # begins election
    # wait a couple of secondes before starting the election
    mycontext['election_timer'] = settimer(8, begin_election, ())
    # begin_election()
