def send_election_message(neighbor_address, message, append=True):
    """
    Send an election message the neighbor_address
    :param nb_retry:
    :param neighbor_address:
    :param message:
    :param append:
    :return:
    """
    max_retry = mycontext['max_retry']
    nb_retry = 1
    success = False

    while not success and nb_retry <= max_retry:

        try:
            if append:
                new_msg = "election\n" + message + "%s:%s|" % (mycontext['my_id'], mycontext['ip'])
            else:
                new_msg = "election\n%s|" % message

            sockobj = openconn(neighbor_address, mycontext['port'])

            print mycontext['ip'], "sending message to", neighbor_address

            sockobj.send(new_msg)

            success = True

            sockobj.close()
        except Exception, e:
            # If we can't communicate, we retry 3 times by waiting 1 second before each retry
            nb_retry += 1
            sleep(1)
            print "Retrying to send message from", mycontext['ip'], "to", neighbor_address, "Error:", (type(e), e)

    if not success:
        print mycontext['ip'], "could not send election message to", neighbor_address, "after", max_retry, "retries"


def begin_election():
    """
    Begin the election on this vessel
    :return:
    """
    next_vessel = get_next_vessel_to(mycontext['ip'])
    # I send my id and my ip adress : my_id:my_ip
    message_to_send = str(mycontext['my_id']) + ":" + mycontext['ip']
    send_election_message(next_vessel, message_to_send, False)


def process_election_message(message):
    """
    Receive the message during the election process. The message contains the id of the vessels who receive and forward
    the message
    :param message: message containing the only the id and ip addresses of the neighbors
    :return:
    """

    # retrieving the ids and ip addresses from the message
    neighbor_ids = []
    neighbor_ips = []
    for item in message.split("|"):
        if len(item) != 0:
            neighbor_id, neighbor_ip = item.split(":")
            neighbor_ids.append(int(neighbor_id))
            neighbor_ips.append(neighbor_ip)

    print "Election message received. Neighbors ids : %s. Ip addresses : %s" % (neighbor_ids, neighbor_ips)

    if neighbor_ids[0] == mycontext['my_id']:  # if the first id is mine, the ring is done

        print "Election process done. Full message : %s" % neighbor_ids

        # find the leader.
        # This part is critical because it can be accessed by multiple threads at the same time
        leader_id = max(neighbor_ids)
        leader_ip = neighbor_ips[neighbor_ids.index(leader_id)]
        print "The id of the leader is %d with ip %s" % (leader_id, leader_ip)
        mycontext['leader_lock'].acquire()
        mycontext['leader_id'] = leader_id
        mycontext['leader_ip'] = leader_ip
        mycontext['leader_lock'].release()

        if leader_id == mycontext['my_id']:
            print "I am the leader"

    else:  # otherwise, I append my my_id, and send the message to my neighbor
        send_election_message(get_next_vessel_to(mycontext['ip']), message, True)


def get_next_vessel_to(adresse_ip):
    """
    Get the next vessel in the ring topology
    :return:
    """

    neighbor_list = mycontext['neighbors']
    my_index = neighbor_list.index(adresse_ip)

    if my_index == len(neighbor_list) - 1:
        return neighbor_list[0]
    else:
        return neighbor_list[my_index + 1]
