def send_election_message(neighbor_address, message, append=True, max_try=0):
    """
    Send
    :param max_try:
    :param neighbor_address:
    :param message:
    :param append:
    :return:
    """
    try:
        if append:
            new_msg = "election\n" + message + "%s|" % mycontext['my_id']
        else:
            new_msg = "election\n%s|" % message

        sockobj = openconn(neighbor_address, mycontext['port'])

        sockobj.send(new_msg)
        sockobj.close()
    except Exception, e:
        if max_try < 3:
            max_try += 1
            send_election_message(neighbor_address, message, append, max_try)
        else:
            print "Could not send election message to %s" % neighbor_address
            print (type(e), e)


def begin_election():
    my_ip = mycontext['ip']

    next_vessel = get_next_vessel_to(my_ip)
    send_election_message(next_vessel, mycontext['my_id'], False)


def process_election_message(message):
    """
    Receive the message during the election process. The message contains the id of the vessels who receive and forward
    the message
    :param message:
    :return:
    """
    neighbor_ids = [int(item) for item in message.split("|") if len(item) != 0]
    print "Election message received. Neighbors ids : %s" % neighbor_ids

    if neighbor_ids[0] == mycontext['my_id']:  # if the first id is mine, the ring is done

        print "Election process done. Full message : %s" % neighbor_ids

        # find the leader.
        # This part is critical because it can be accessed by multiple threads at the same time
        leader_id = max(neighbor_ids)
        print "The id of the leader is %d" % leader_id
        mycontext['leader_id_lock'].acquire()
        mycontext['leader_id'] = leader_id
        mycontext['leader_id_lock'].release()

    else:  # otherwise, I append my my_id, and send the message to my neighbor
        send_election_message(get_next_vessel_to(mycontext['ip']), message, True)


def get_next_vessel_to(adresse_ip):
    """
    Get the next vessel in the ring topology
    :return:
    """

    neighbor_list = mycontext['neighbors']
    my_index = neighbor_list.index(adresse_ip)

    if my_index == len(neighbor_list) - 1:
        return neighbor_list[0]
    else:
        return neighbor_list[my_index + 1]
